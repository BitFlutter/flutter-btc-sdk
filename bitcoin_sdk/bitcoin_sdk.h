/* Bitcoin SDK FFI Header - Generated by cbindgen */

/* Generated with cbindgen:0.29.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

#ifdef __cplusplus
namespace BitcoinSdk {
#endif  // __cplusplus

/**
 * Amount
 *
 * The [Amount] type can be used to express Bitcoin amounts that support
 * arithmetic and conversion to various denominations.
 *
 *
 * Warning!
 *
 * This type implements several arithmetic operations from [core::ops].
 * To prevent errors due to overflow or underflow when using these operations,
 * it is advised to instead use the checked arithmetic methods whose names
 * start with `checked_`.  The operations from [core::ops] that [Amount]
 * implements will panic when overflow or underflow occurs.  Also note that
 * since the internal representation of amounts is unsigned, subtracting below
 * zero is considered an underflow and will cause a panic if you're not using
 * the checked arithmetic methods.
 *
 */
typedef struct Amount Amount;

/**
 * An absolute block height, guaranteed to always contain a valid height value.
 */
typedef struct Height Height;

/**
 * Weight prediction of an individual input.
 *
 * This helper type collects information about an input to be used in [`predict_weight`] function.
 * It can only be created using the [`new`](InputWeightPrediction::new) function.
 */
typedef struct InputWeightPrediction InputWeightPrediction;

/**
 * Bitcoin transaction input sequence number.
 *
 * The sequence field is used for:
 * - Indicating whether absolute lock-time (specified in `lock_time` field of [`Transaction`])
 *   is enabled.
 * - Indicating and encoding [BIP-68] relative lock-times.
 * - Indicating whether a transcation opts-in to [BIP-125] replace-by-fee.
 *
 * Note that transactions spending an output with `OP_CHECKLOCKTIMEVERIFY`MUST NOT use
 * `Sequence::MAX` for the corresponding input. [BIP-65]
 *
 * [BIP-65]: <https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki>
 * [BIP-68]: <https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki>
 * [BIP-125]: <https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki>
 */
typedef struct Sequence Sequence;

/**
 * Flags to indicate which network services a node supports.
 */
typedef struct ServiceFlags ServiceFlags;

/**
 * Bitcoin block version number.
 *
 * Originally used as a protocol version, but repurposed for soft-fork signaling.
 *
 * The inner value is a signed integer in Bitcoin Core for historical reasons, if version bits is
 * being used the top three bits must be 001, this gives us a useful range of [0x20000000...0x3FFFFFFF].
 *
 * > When a block nVersion does not have top bits 001, it is treated as if all bits are 0 for the purposes of deployments.
 *
 * ### Relevant BIPs
 *
 * * [BIP9 - Version bits with timeout and delay](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki) (current usage)
 * * [BIP34 - Block v2, Height in Coinbase](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki)
 */
typedef struct Version Version;

/**
 * A 256 bit integer representing work.
 *
 * Work is a measure of how difficult it is to find a hash below a given [`Target`].
 *
 * ref: <https://en.bitcoin.it/wiki/Work>
 */
typedef struct Work Work;

/**
 * Estrutura para representar uma carteira Bitcoin
 */
typedef struct BitcoinWallet {
  char *private_key;
  char *public_key;
  char *address;
  char *mnemonic;
} BitcoinWallet;



















































#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * Gera uma nova carteira Bitcoin com mnemônico
 */
struct BitcoinWallet *generate_wallet(int32_t network_type);

/**
 * Restaura carteira a partir de mnemônico
 */
struct BitcoinWallet *restore_wallet_from_mnemonic(const char *mnemonic_str, int32_t network_type);

/**
 * Valida se um mnemônico é válido
 */
int32_t validate_mnemonic(const char *mnemonic_str);

/**
 * Valida se um endereço Bitcoin é válido
 */
int32_t validate_address(const char *address_str, int32_t network_type);

/**
 * Converte BTC para satoshis
 */
uint64_t btc_to_satoshis(double btc);

/**
 * Converte satoshis para BTC
 */
double satoshis_to_btc(uint64_t satoshis);

/**
 * Verifica se um valor em satoshis é válido
 */
int32_t is_valid_amount(uint64_t satoshis);

/**
 * Libera memória alocada para a carteira
 */
void free_wallet(struct BitcoinWallet *wallet);

/**
 * Libera string C
 */
void free_c_string(char *s);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

#ifdef __cplusplus
}  // namespace BitcoinSdk
#endif  // __cplusplus
